pragma soliditypp ^0.4.3;

// Contract module which provides a basic access control mechanism, where
// there is an account (an owner) that can be granted exclusive access to
// specific functions.
// 
// By default, the owner account will be the one that deploys the contract. This
// can later be changed with {transferOwnership}.
// 
// This module is used through inheritance. It will make available the modifier
// `onlyOwner`, which can be applied to your functions to restrict their use to
// the owner.
contract Ownable {
	event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

	message receiveOwner(address owner);

	address private _owner;

	// Initializes the contract setting the deployer as the initial owner
	constructor() public {
		_transferOwnership(msg.sender);
	}

	onMessage requestOwner() {
		send(msg.sender, receiveOwner(_owner));
	}

	getter getOwner() returns (address owner) {
		return _owner;
	}

	// Returns the address of the current owner
	function _getOwner() public view returns (address owner) {
		return _owner;
	}

 	function onlyOwner() internal {
		require(_owner == msg.sender, "Ownable: caller is not the owner");
	}

	// Leaves the contract without owner. It will not be possible to call functions
	// with `onlyOwner()` anymore. Can only be called by the current owner.
	// 
	// NOTE: Renouncing ownership will leave the contract without an owner,
	// thereby removing any functionality that is only available to the owner.
	function renounceOwnership() public {
		onlyOwner();
		_transferOwnership(address(0));
	}

	// Transfers ownership of the contract to a new account (`newOwner`).
	// Can only be called by the current owner.
	function transferOwnership(address newOwner) public {
		onlyOwner();
		require(newOwner != address(0), "Ownable: new owner is the zero address");
		_transferOwnership(newOwner);
	}

	// Transfers ownership of the contract to a new account (`newOwner`).
	// Internal function without access restriction.
	function _transferOwnership(address newOwner) internal {
		address oldOwner = _owner;
		_owner = newOwner;
		emit OwnershipTransferred(oldOwner, newOwner);
	}
}
